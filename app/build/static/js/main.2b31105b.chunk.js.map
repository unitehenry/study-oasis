{"version":3,"sources":["assets/constants.js","SignIn.js","SwipeWindow.js","AskQuestion.js","Answers.js","Dashboard.js","App.js","serviceWorker.js","index.js"],"names":["appConfig","AppConfig","Signin","handleSignIn","this","props","react_default","a","createElement","className","onClick","Component","Choices","_ref","choices","map","choice","i","key","concat","type","Question","_ref2","question","SwipeWindow_Choices","rows","style","textAlign","SwipeWindow","_ref3","userSession","_useState","useState","_useState2","Object","slicedToArray","questions","setQuestions","useEffect","length","getFile","username","decrypt","then","contents","JSON","parse","SwipeWindow_Question","Choice","removeChoice","AskQuestion","setQuestion","_useState3","_useState4","setChoices","placeholder","value","onChange","e","target","onKeyUp","keyCode","toConsumableArray","addChoice","AskQuestion_Choice","filter","c","index","push","putFile","stringify","encrypt","console","log","Answer","answer","removeAnswer","Answers","answers","setAnswers","Answers_Answer","Dashpane","handleSignOut","setCurrentView","Dashboard","loadUserData","currentView","Dashboard_Dashpane","view","src_AskQuestion_0","src_Answers_0","src_SwipeWindow_0","UserSession","App","preventDefault","redirectToSignIn","signUserOut","window","location","origin","_this","isUserSignedIn","src_Dashboard_0","src_SignIn","isSignInPending","handlePendingSignIn","userData","Boolean","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2b31105b.chunk.js","sourcesContent":["import { AppConfig } from 'blockstack'\n\nexport const appConfig = new AppConfig(['store_write', 'publish_data'])\n\nexport const TASKS_FILENAME = 'tasks.json'\n\nexport const EXPLORER_URL = 'https://explorer.blockstack.org'","import React, { Component } from 'react';\nimport './SignIn.css';\n\nclass Signin extends Component {\n\n  render() {\n    const { handleSignIn } = this.props;\n\n    return (\n      <div className=\"SignIn\">\n        <h1 className=\"header-logo\">Study Oasis</h1>\n        <button onClick={handleSignIn}>sign in with blockstack</button>\n      </div>\n    );\n  }\n}\n\nexport default Signin","import React, { useState, useEffect } from 'react';\nimport './SwipeWindow.css';\n\nconst Choices = ({ choices }) => {\n    return (\n        <ul>\n            {choices.map((choice, i) => <li key={`${i}${choice}`}> <input type=\"checkbox\" />{choice}</li>)}\n        </ul>\n\n    )\n}\n\nconst Question = ({ question }) => {\n    return (\n        <div className=\"Question\">\n            <p>{question && question.question}</p>\n\n            {question && (question.choices ? <Choices choices={question.choices} /> : <textarea rows={10} />)}\n\n            {\n                question && (\n                    <div className=\"actions\">\n                        <button>skip</button>\n                        <button>submit</button>\n                    </div>\n                )\n            }\n\n            { !question && <p style={{textAlign: 'center'}}>getting a question...</p> }\n        </div>\n    )\n}\n\nconst SwipeWindow = ({ userSession }) => {\n    const [questions, setQuestions] = useState([]);\n\n    const blockstackId = 'unitehenry.id.blockstack';\n\n    useEffect(() => {\n        if (questions.length === 0) {\n            userSession.getFile('/questions.json', { username: blockstackId, decrypt: false })\n                .then(contents => setQuestions(JSON.parse(contents)))\n        }\n    })\n\n    return (\n        <div className=\"SwipeWindow\">\n            {/* <div className=\"swipe left-swipe\"><p>left</p></div> */}\n\n            <div className=\"swipe-card\">\n                <Question question={questions && questions[0]} />\n            </div>\n\n            {/* <div className=\"swipe right-swipe\"><p>right</p></div> */}\n        </div>\n    )\n}\n\nexport default SwipeWindow;","import React, { useState } from 'react';\nimport './AskQuestion.css';\n\nconst Choice = ({ choice, removeChoice }) => {\n    return (\n        <div className=\"option\">\n            <p>{choice}</p>\n            <span onClick={removeChoice}>X</span>\n        </div>\n    )\n}\n\nconst AskQuestion = ({ userSession }) => {\n    const [question, setQuestion] = useState('');\n    const [choices, setChoices] = useState([]);\n\n    const addChoice = (e) => {\n        if (e.keyCode === 13) {\n            setChoices([...choices, e.target.value]);\n            e.target.value = '';\n        }\n    }\n\n    const removeChoice = (i) => {\n        setChoices(choices.filter((c, index) => index !== i));\n    }\n\n    const submitQuestion = () => {\n        userSession.getFile('/questions.json', { decrypt: false })\n            .then(contents => {\n                const questions = JSON.parse(contents);\n                question && questions && questions.push({ question, choices });\n\n                questions ? userSession.putFile('/questions.json', JSON.stringify(questions), { encrypt: false }) : userSession.putFile('/questions.json', JSON.stringify([{ question, choices }]), { encrypt: false })\n\n                // API Call here\n\n                setQuestion('');\n                setChoices([]);\n\n                console.log({ question, choices });\n            })\n    }\n\n    // const getFile = () => {\n    //     userSession.getFile('/questions.json', { decrypt: false })\n    //         .then(contents => {\n    //             console.log(JSON.parse(contents))\n    //         })\n    // }\n\n    return (\n        <div className=\"AskQuestion\">\n            <div className=\"question-card\">\n                <input type=\"text\" placeholder=\"ask a question\" value={question} onChange={e => setQuestion(e.target.value)} />\n                <div className=\"choice\">\n                    <input type=\"text\" placeholder=\"add a choice\" onKeyUp={e => addChoice(e)} />\n                </div>\n                <div className=\"options\">\n                    {choices.map((choice, i) => <Choice key={`${i}${choice}`} choice={choice} removeChoice={() => removeChoice(i)} />)}\n                </div>\n                <button className=\"submit-btn\" onClick={submitQuestion}>submit</button>\n            </div>\n            <p className=\"footnote\">\n                <i>just submit if non multiple-choice question</i>\n                {/* <button onClick={getFile}>get file</button> */}\n            </p>\n        </div>\n    )\n}\n\nexport default AskQuestion;","import React, { useState, useEffect } from 'react';\nimport './Answers.css';\n\nconst Answer = ({ answer, removeAnswer }) => {\n\n    const correctClick = () => {\n        // remove from db\n        removeAnswer();\n    }\n\n    const incorrectClick = () => {\n        // remove from db\n        removeAnswer();\n    }\n\n    return (\n        <div className=\"Answer\">\n            <p><strong>{answer.question && answer.question}</strong></p>\n            <p>{answer.answer && answer.answer}</p>\n            <div className=\"actions\">\n                <button onClick={correctClick}>correct</button>\n                <button onClick={incorrectClick}>incorrect</button>\n            </div>\n        </div>\n    )\n}\n\nconst Answers = ({ userSession }) => {\n    const blockstackId = 'unitehenry.id.blockstack';\n    const [answers, setAnswers] = useState([]);\n\n    useEffect(() => {\n        if (answers.length === 0) {\n            userSession.getFile('/questions.json', { username: blockstackId, decrypt: false })\n                .then(contents => {\n                    setAnswers(JSON.parse(contents));\n                })\n        }\n    })\n\n    const removeAnswer = (i) => {\n        setAnswers(answers.filter((a, index) => index !== i));\n    }\n\n    return (\n        <div className=\"Answers\">\n            {\n                answers ? \n                answers.map((answer, i) => <Answer key={`${i}${answer.answer}`} answer={answer} removeAnswer={() => removeAnswer(i)} />) \n                :\n                <p style={{textAlign: 'center'}}>no one has answered your questions</p>\n            }\n        </div>\n    )\n}\n\nexport default Answers;","import React, { useState, useEffect } from 'react';\nimport './Dashboard.css';\n\n// Components\nimport SwipeWindow from './SwipeWindow';\nimport AskQuestion from './AskQuestion';\nimport Answers from './Answers';\n\nconst Dashpane = ({ handleSignOut, setCurrentView, answers }) => {\n    console.log(answers)\n\n    return (\n        <div className=\"Dashpane\">\n            <div className=\"option\" onClick={() => setCurrentView('askquestion')}>\n                <p>ask a question</p>\n            </div>\n            <div className=\"option\" onClick={() => setCurrentView('answers')}>\n                <p>answers</p>\n                {answers && <span>{answers}</span>}\n            </div>\n            <div className=\"option\" onClick={() => setCurrentView('questions')}>\n                <p>questions</p>\n            </div>\n            <div className=\"option\" onClick={(e) => handleSignOut(e)}>\n                <p>sign out</p>\n            </div>\n        </div>\n    )\n}\n\nconst Dashboard = ({ userSession, handleSignOut }) => {\n    const blockstackId = 'unitehenry.id.blockstack';\n    console.log(userSession.loadUserData().username, 'signed in');\n\n    const [ currentView, setCurrentView ] = useState('questions');\n    const [ answers, setAnswers ] = useState([]);\n\n    useEffect(() => {\n        if (answers.length === 0) {\n            userSession.getFile('/questions.json', { username: blockstackId, decrypt: false })\n                .then(contents => {\n                    setAnswers(JSON.parse(contents));\n                })\n        }\n    })\n\n    return (\n        <div className=\"Dashboard\">\n            <div className=\"container\">\n                <Dashpane handleSignOut={handleSignOut} setCurrentView={(view) => setCurrentView(view)} answers={answers.length} />\n                { currentView === 'askquestion' && <AskQuestion userSession={userSession} />}\n                { currentView === 'answers' && <Answers userSession={userSession} />}\n                { currentView === 'questions' && <SwipeWindow userSession={userSession} /> }\n            </div>\n        </div>\n    )\n}\n\nexport default Dashboard;","import React, { Component } from 'react';\nimport './App.css';\n\nimport { UserSession } from 'blockstack';\nimport { appConfig } from './assets/constants'\n\n// Components\nimport SignIn from './SignIn';\nimport Dashboard from './Dashboard';\n\nconst userSession = new UserSession({ appConfig })\n\nexport default class App extends Component {\n\n  handleSignIn(e) {\n    e.preventDefault();\n    userSession.redirectToSignIn();\n  }\n\n  handleSignOut(e) {\n    e.preventDefault();\n    userSession.signUserOut(window.location.origin);\n  }\n\n  render() {\n    return (\n      <div>\n          {!userSession.isUserSignedIn() ? <SignIn userSession={userSession} handleSignIn={this.handleSignIn} /> : <Dashboard userSession={userSession} handleSignOut={(e) => this.handleSignOut(e)} />}\n      </div>\n    );\n  }\n\n  componentDidMount() {\n    if (userSession.isSignInPending()) {\n      userSession.handlePendingSignIn().then((userData) => {\n        //if (!userData.username) {\n        //  throw new Error('This app requires a username.')\n        //}\n        window.location = window.location.origin;\n      });\n    }\n  }\n\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}